#pragma kernel AgentUpdate
#pragma kernel SimRender

float random(uint x)
{
    x ^= 2747636419u;
    x *= 2654435769u;
    x ^= x >> 16;
    x *= 2654435769u;
    x ^= x >> 16;
    x *= 2654435769u;
    return x / 4294967295.0 ;
}
float PI = 3.1415926;

// Agent structure
struct Agent
{
    float2 position;
    float angle;
    float dummy1;
};

// agent Update Variable
RWStructuredBuffer<Agent> agents;
int agentCnt;
float moveSpeed;

// global
RWTexture2D<float> trailMap;
RWTexture2D<float4> Result;
float deltaTime;
int width;
int height;
bool isRunning;

float sensorDst;

float sense(Agent agent, float angleOffset)
{
    float angle = angleOffset + agent.angle;
    int2 senseCenter = agent.position + float2(cos(angle), sin(angle)) * sensorDst;
    float sum = 0.0;
    for(int i = -1; i <= 1; i++)
    {
        for(int j = -1; j < 1; j++)
        {
            int x = senseCenter.x + i;
            int y = senseCenter.y + j;
            if(x >= 0 && x < width && y >= 0 && y < height)
            {
                sum += trailMap[int2(x,y)];
            }
        }
    }
    return sum;
}

float agentTurnSpeed;

[numthreads(64,1,1)]
void AgentUpdate (uint3 id : SV_DispatchThreadID)
{
    if(!isRunning || int(id.x) >= agentCnt) return;
    float randomValue = random(int(agents[id.x].position.x) + int(agents[id.x].position.y) * width + int(agents[id.x].angle * 10.0) );
    
    float2 newPos = agents[id.x].position + float2(cos(agents[id.x].angle), sin(agents[id.x].angle)) * moveSpeed * deltaTime;

    // hit boundary
    if(newPos.x < 0 || newPos.x >= width || newPos.y < 0 || newPos.y >= height)
    {
        // clamp position
        newPos.x = min(width - 1, max(0, newPos.x));
        newPos.y = min(height - 1, max(0, newPos.y));
        // give random new angle
        agents[id.x].angle = randomValue * 2.0 * 3.14;
    }
    else
    {
        float forwardW = sense(agents[id.x], 0.0);
        float leftW = sense(agents[id.x],22.5 / 360.0 * 2.0 * 3.14);
        float rightW = sense(agents[id.x], -22.5 / 360.0 * 2.0 * 3.14);

        if(forwardW > leftW && forwardW > rightW)
        {
        }
        else if(forwardW < leftW && forwardW < rightW)
        {
            agents[id.x].angle +=  (randomValue - 0.5) * 2.0 * agentTurnSpeed * deltaTime;
        }
        else if(leftW > rightW)
        {
            agents[id.x].angle += randomValue * agentTurnSpeed * deltaTime;
        }
        else if(rightW > leftW)
        {
            agents[id.x].angle -= randomValue * agentTurnSpeed * deltaTime;
        }
    }

    trailMap[agents[id.x].position.xy] = 1.0;
    agents[id.x].position = newPos;
}

float diffusionRate;
float evaporate;

void DiffuseTrailMap(uint2 xy)
{
    float sum = 0;
    for(int i = -1; i <= 1; i++)
    {
        for(int j = -1; j <= 1; j++)
        {
            int x = xy.x + i;
            int y = xy.y + j;
            if(x < 0 ||  x >= width || y < 0 || y >= height) continue;
            sum += trailMap[int2(x,y)];
        }
    }
    float diffusedVal = sum / 9.0;
    // trailMap[xy] = diffusedVal;
    trailMap[xy] = lerp(trailMap[xy], diffusedVal, diffusionRate * deltaTime);
}

[numthreads(8,8,1)]
void SimRender (uint3 id : SV_DispatchThreadID)
{
    if(isRunning)
    {
        DiffuseTrailMap(id.xy);
        // evaporate
        trailMap[id.xy] = max(0, trailMap[id.xy] - evaporate * deltaTime);
    }
    
    Result[id.xy] = trailMap[id.xy];
}
