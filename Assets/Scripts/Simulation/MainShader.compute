#pragma kernel AgentUpdate
#pragma kernel SimRender

float random (float2 uv)
{
    return frac(sin(dot(uv,float2(12.9898,78.233)))*43758.5453123);
}

// Agent Stuff
struct Agent
{
    float2 position;
    float angle;
    float dummy1;
};

RWStructuredBuffer<Agent> agents;
RWTexture2D<float> trailMap;
int agentCnt;
float moveSpeed;
// deltaTime
float deltaTime;
// boundary
int width;
int height;

[numthreads(64,1,1)]
void AgentUpdate (uint3 id : SV_DispatchThreadID)
{
    // if (id.x >= (uint)agentCnt) return;

    // get new position
    Agent agent = agents[id.x];
    float2 dir = float2(cos(agent.angle), sin(agent.angle));
    float2 newPos = agents[id.x].position + dir * moveSpeed * deltaTime;

    // if out of bound, clamp in screen and give new random angle
    if(newPos.x < 0 || newPos.x >= width || newPos.y < 0 || newPos.y >= height)
    {
        newPos.x = min(width - 1, max(0, newPos.x));
        newPos.y = min(height - 1, max(0, newPos.y));
        agents[id.x].angle = random(agents[id.x].position + agents[id.x].angle) * 2 * 3.141592;
    }

    // update position and leave trail
    trailMap[agents[id.x].position] = 1;
    agents[id.x].position = newPos;
}

// Display Stuff
RWTexture2D<float4> Result;

[numthreads(8,8,1)]
void SimRender (uint3 id : SV_DispatchThreadID)
{
    // Trail Map Render
    Result[id.xy] = trailMap[id.xy];
}
